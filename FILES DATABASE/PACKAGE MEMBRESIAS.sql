--CREACION DE PAQUETE PARA ALMACENAR TODO LO RELACIONADO A LAS MEMBRESIAS

CREATE OR REPLACE PACKAGE FIDE_LOS_JAULES_MEMBRESIAS_PKG 
AS
PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_OBTENER_MEMBRESIAS_SP (P_CURSOR OUT SYS_REFCURSOR);
PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_MEMBRESIA_SP (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER);
PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_BENEFICIOS_SP (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER);
PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_BENEFICIOS_MEMBRESIAS_SP (P_CURSOR OUT SYS_REFCURSOR);
PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_ALL_BENEFICIOS_SP (P_CURSOR OUT SYS_REFCURSOR);
PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_ASOCIAR_BENEFICIOS_SP (P_ID_BENEFICIO IN NUMBER, P_ID_MEMBRESIA IN NUMBER);
PROCEDURE FIDE_MEMBRESIAS_TB_GET_MEMBRESIA_USUARIO_SP (P_CURSOR OUT SYS_REFCURSOR, P_CEDULA IN NUMBER);
PROCEDURE FIDE_MEMBRESIAS_TB_MODIFICAR_MEMBRESIA_SP (P_ID_MEMBRESIA IN NUMBER, P_NOMBRE 
IN VARCHAR2, P_COSTO IN NUMBER, P_DURACION IN NUMBER, P_DESCRIPCION IN varchar2, P_NUMERO IN NUMBER);
PROCEDURE FIDE_MEMBRESIAS_TB_ELIMINAR_MEMBRESIA_SP (P_ID_MEMBRESIA IN NUMBER);
PROCEDURE FIDE_MEMBRESIAS_TB_CREAR_MEMBRESIA_SP ( P_NOMBRE 
IN VARCHAR2, P_COSTO IN NUMBER, P_DURACION IN NUMBER, P_DESCRIPCION IN varchar2, P_NUMERO IN NUMBER);
END FIDE_LOS_JAULES_MEMBRESIAS_PKG;

CREATE OR REPLACE PACKAGE BODY FIDE_LOS_JAULES_MEMBRESIAS_PKG  AS

PROCEDURE FIDE_MEMBRESIAS_TB_CREAR_MEMBRESIA_SP (P_NOMBRE 
IN VARCHAR2, P_COSTO IN NUMBER, P_DURACION IN NUMBER, P_DESCRIPCION IN varchar2, P_NUMERO IN NUMBER) AS
BEGIN
    INSERT INTO FIDE_TIPO_MEMBRESIAS_TB (NOMBRE, COSTO, DURACION_DIAS, DESCRIPCION,
    NUM_INVITADOS, ID_ESTADO) VALUES (P_NOMBRE, P_COSTO, P_DURACION, P_DESCRIPCION, P_NUMERO, 1);
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
END FIDE_MEMBRESIAS_TB_CREAR_MEMBRESIA_SP;

PROCEDURE FIDE_MEMBRESIAS_TB_ELIMINAR_MEMBRESIA_SP (P_ID_MEMBRESIA IN NUMBER) AS
BEGIN
    UPDATE FIDE_TIPO_MEMBRESIAS_TB SET ID_ESTADO = 0 WHERE ID_TIPO_MEMBRESIA = P_ID_MEMBRESIA;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
END FIDE_MEMBRESIAS_TB_ELIMINAR_MEMBRESIA_SP;

PROCEDURE FIDE_MEMBRESIAS_TB_MODIFICAR_MEMBRESIA_SP (P_ID_MEMBRESIA IN NUMBER, P_NOMBRE 
IN VARCHAR2, P_COSTO IN NUMBER, P_DURACION IN NUMBER, P_DESCRIPCION IN varchar2, P_NUMERO IN NUMBER) 
AS
BEGIN
    UPDATE FIDE_TIPO_MEMBRESIAS_TB SET COSTO = P_COSTO, DURACION_DIAS = P_DURACION,
    NOMBRE = P_NOMBRE, NUM_INVITADOS = P_NUMERO, DESCRIPCION = P_DESCRIPCION,
    ID_ESTADO = 1 WHERE ID_TIPO_MEMBRESIA = P_ID_MEMBRESIA;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
END FIDE_MEMBRESIAS_TB_MODIFICAR_MEMBRESIA_SP;
--OBTENER LA MEMBRESIA DEL USUARIO
PROCEDURE FIDE_MEMBRESIAS_TB_GET_MEMBRESIA_USUARIO_SP (P_CURSOR OUT SYS_REFCURSOR, P_CEDULA IN NUMBER)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT ID_MEMBRESIA, FECHA_INICIO, FECHA_FIN, ID_ESTADO, ID_TIPO_MEMBRESIA
    FROM FIDE_MEMBRESIAS_TB
    WHERE CEDULA = P_CEDULA AND ID_ESTADO = 1;

END FIDE_MEMBRESIAS_TB_GET_MEMBRESIA_USUARIO_SP;

---------------------------

PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_OBTENER_MEMBRESIAS_SP (P_CURSOR OUT SYS_REFCURSOR)
IS
    V_CONTAR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM FIDE_TIPO_MEMBRESIAS_TB WHERE ID_ESTADO = 1;
    IF V_CONTAR> 0 THEN
    OPEN P_CURSOR FOR
    SELECT ID_TIPO_MEMBRESIA, COSTO, DURACION_DIAS, NOMBRE, NUM_INVITADOS, DESCRIPCION
    FROM FIDE_TIPO_MEMBRESIAS_TB
    WHERE ID_ESTADO = 1;
    
    ELSE 
     OPEN p_cursor FOR
        SELECT 'No existen membresías disponibles' AS MENSAJE, NULL AS ID_TIPO_MEMBRESIA, NULL AS COSTO, NULL AS DURACION_DIAS, NULL AS NOMBRE, NULL AS NUM_INVITADOS FROM DUAL;
    END IF;
END FIDE_TIPO_MEMBRESIAS_TB_OBTENER_MEMBRESIAS_SP;

PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_MEMBRESIA_SP (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER) 
AS
BEGIN
    OPEN P_CURSOR FOR 
    SELECT ID_TIPO_MEMBRESIA, COSTO, DURACION_DIAS, NOMBRE, NUM_INVITADOS, DESCRIPCION
    FROM FIDE_TIPO_MEMBRESIAS_TB
    WHERE ID_TIPO_MEMBRESIA = P_ID;
END FIDE_TIPO_MEMBRESIAS_TB_GET_MEMBRESIA_SP;

PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_BENEFICIOS_SP (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT BM.ID_BENEFICIO_MEMBRESIAS, BM.ID_TIPO_MEMB, BM.ID_BENEFICIO, BM.ID_ESTADO, B.DESCRIPCION, M.NOMBRE
    FROM FIDE_BENEFICIOS_MEMBRESIAS_TB BM INNER JOIN FIDE_BENEFICIOS_TB B ON BM.ID_BENEFICIO = B.ID_BENEFICIO
    INNER JOIN FIDE_TIPO_MEMBRESIAS_TB M ON M.ID_TIPO_MEMBRESIA = BM.ID_TIPO_MEMB
    WHERE M.ID_TIPO_MEMBRESIA = P_ID AND BM.ID_ESTADO = 1;
END FIDE_TIPO_MEMBRESIAS_TB_GET_BENEFICIOS_SP;


PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_BENEFICIOS_MEMBRESIAS_SP (P_CURSOR OUT SYS_REFCURSOR)
AS 
BEGIN
 OPEN P_CURSOR FOR
    SELECT BM.ID_BENEFICIO_MEMBRESIAS, BM.ID_TIPO_MEMB, BM.ID_BENEFICIO, BM.ID_ESTADO, B.DESCRIPCION, M.NOMBRE
    FROM FIDE_BENEFICIOS_MEMBRESIAS_TB BM INNER JOIN FIDE_BENEFICIOS_TB B ON BM.ID_BENEFICIO = B.ID_BENEFICIO
    INNER JOIN FIDE_TIPO_MEMBRESIAS_TB M ON M.ID_TIPO_MEMBRESIA = BM.ID_TIPO_MEMB WHERE BM.ID_ESTADO = 1;
END FIDE_TIPO_MEMBRESIAS_TB_GET_BENEFICIOS_MEMBRESIAS_SP;

PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_GET_ALL_BENEFICIOS_SP (P_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT ID_BENEFICIO, DESCRIPCION, ID_ESTADO FROM FIDE_BENEFICIOS_TB
    WHERE ID_ESTADO = 1;
END FIDE_TIPO_MEMBRESIAS_TB_GET_ALL_BENEFICIOS_SP;

PROCEDURE FIDE_TIPO_MEMBRESIAS_TB_ASOCIAR_BENEFICIOS_SP (P_ID_BENEFICIO IN NUMBER, P_ID_MEMBRESIA IN NUMBER) AS
V_CONTAR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM FIDE_BENEFICIOS_MEMBRESIAS_TB
    WHERE ID_TIPO_MEMB = P_ID_MEMBRESIA AND ID_BENEFICIO = P_ID_BENEFICIO AND ID_ESTADO =1;
    
    IF V_CONTAR = 0 THEN
        INSERT INTO FIDE_BENEFICIOS_MEMBRESIAS_TB (ID_BENEFICIO, ID_TIPO_MEMB, ID_ESTADO)
        VALUES (P_ID_BENEFICIO, P_ID_MEMBRESIA, 1);
        COMMIT;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'El beneficio seleccionado ya está asignado a la membresía');
    END IF;
EXCEPTION 
    WHEN OTHERS THEN 
        RAISE_APPLICATION_ERROR(-20001, SQLERRM);
END FIDE_TIPO_MEMBRESIAS_TB_ASOCIAR_BENEFICIOS_SP;

END FIDE_LOS_JAULES_MEMBRESIAS_PKG;

COMMIT;


CREATE SEQUENCE ID_BENEFICIO_MEMBRESIA_SEQ INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 0;

CREATE SEQUENCE ID_BENEFICIO_SEQ INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 0;

create or replace TRIGGER FIDE_BENEFICIOS_MEMBRESIAS_TB_INSERTAR_TG
    BEFORE INSERT ON FIDE_BENEFICIOS_MEMBRESIAS_TB
    FOR EACH ROW
    BEGIN

        SELECT ID_BENEFICIO_MEMBRESIA_SEQ.NEXTVAL INTO :NEW.ID_BENEFICIO_MEMBRESIAS FROM DUAL;
END FIDE_BENEFICIOS_MEMBRESIAS_TB;

create or replace TRIGGER FIDE_BENEFICIOS_TB_INSERTAR_TG
    BEFORE INSERT ON FIDE_BENEFICIOS_TB
    FOR EACH ROW
    BEGIN

        SELECT ID_BENEFICIO_SEQ.NEXTVAL INTO :NEW.ID_BENEFICIO FROM DUAL;
END FIDE_BENEFICIOS_MEMBRESIAS_TB;


EXEC FIDE_LOS_JAULES_MEMBRESIAS_PKG.FIDE_TIPO_MEMBRESIAS_TB_ASOCIAR_BENEFICIOS_SP(1,2)
