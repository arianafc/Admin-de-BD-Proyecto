CREATE TABLE FIDE_CLAVE_ENCRIPTAR_TB(
    ID_CLAVE NUMBER CONSTRAINT ID_CLAVE_PK PRIMARY KEY,
    CLAVE RAW(32)
) TABLESPACE FIDE_LOS_JAULES_TBS; 

-----------------------------------------------------------------------
INSERT INTO FIDE_CLAVE_ENCRIPTAR_TB(ID_CLAVE, CLAVE)
VALUES(1, UTL_RAW.CAST_TO_RAW('12345678901234567890123456789012'));
-----------------------------------------------------------------------
CREATE OR REPLACE PACKAGE FIDE_LOS_JAULES_ENCRIPTACION_PKG AS
    PROCEDURE FIDE_ENCRIPTAR_CONTRASENA_SP(
        P_CEDULA NUMBER,   
        P_NOMBRE VARCHAR2,
        P_APELLIDO1 VARCHAR2,
        P_APELLIDO2 VARCHAR2,
        P_CONTRASENA VARCHAR2
    );
END FIDE_LOS_JAULES_ENCRIPTACION_PKG;
/ 
-----------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY FIDE_LOS_JAULES_ENCRIPTACION_PKG AS
    PROCEDURE FIDE_ENCRIPTAR_CONTRASENA_SP(
        P_CEDULA NUMBER,   
        P_NOMBRE VARCHAR2,
        P_APELLIDO1 VARCHAR2,
        P_APELLIDO2 VARCHAR2,
        P_CONTRASENA VARCHAR2
    ) AS
        L_KEY RAW(32);
        L_ENCRIPTED_DATA RAW(2000);
    BEGIN
        IF NOT FIDE_VERIFICA_CONTRASENA(P_NOMBRE, P_CONTRASENA, '') THEN
            RAISE_APPLICATION_ERROR(-20001, 'La contraseña no cumple con los requisitos.');
        END IF;

        SELECT CLAVE INTO L_KEY
        FROM FIDE_CLAVE_ENCRIPTAR_TB
        WHERE ID_CLAVE=1;

        L_ENCRIPTED_DATA := DBMS_CRYPTO.Encrypt(
            SRC => UTL_RAW.CAST_TO_RAW(P_CONTRASENA),
            TYP => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5,
            KEY => L_KEY
        );

        INSERT INTO ADMINISTRATOR.FIDE_USUARIOS_TB(
            CEDULA, 
            NOMBRE, 
            APELLIDO1, 
            APELLIDO2, 
            CONTRASENA, 
            ID_ROL, 
            ID_ASOCIADO, 
            ID_ESTADO,
            FECHA_INGRESO 
        )
        VALUES (
            P_CEDULA, 
            P_NOMBRE, 
            P_APELLIDO1, 
            P_APELLIDO2, 
            L_ENCRIPTED_DATA, 
            1, 
            1, 
            1, 
            SYSDATE 
        );
        
        COMMIT;  

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'No se encontró la clave de encriptación.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'ERROR EN EL PROCESO DE ENCRIPTACIÓN: ' || SQLERRM);
    END FIDE_ENCRIPTAR_CONTRASENA_SP;
END FIDE_LOS_JAULES_ENCRIPTACION_PKG;
/





COMMIT
--ejemplo
BEGIN
   FIDE_LOS_JAULES_ENCRIPTACION_PKG.FIDE_ENCRIPTAR_CONTRASENA_SP(
        P_CEDULA => 113810955, 
        P_NOMBRE => 'Ariana', 
        P_APELLIDO1 => 'Fallas', 
        P_APELLIDO2 => 'Calderon', 
        P_CONTRASENA => 'MiContraseñaSegura123'
    );
END;

CREATE OR REPLACE PACKAGE FIDE_LOS_JAULES_DESENCRIPTACION_CONTRASENA_PKG AS
    PROCEDURE FIDE_DESENCRIPTAR_CONTRASENA_SP(
        P_CEDULA IN NUMBER,
        P_CONTRASENA OUT VARCHAR2
    );
END FIDE_LOS_JAULES_DESENCRIPTACION_CONTRASENA_PKG;
/
--------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY FIDE_LOS_JAULES_DESENCRIPTACION_CONTRASENA_PKG AS

    PROCEDURE FIDE_DESENCRIPTAR_CONTRASENA_SP(
        P_CEDULA IN NUMBER,
        P_CONTRASENA OUT VARCHAR2
    ) AS
        L_KEY RAW(32);                
        L_ENCRIPTED_DATA RAW(2000);    
        L_DESENCRIPTED_DATA RAW(2000); 
        L_RESULTADO VARCHAR2(100);     
    BEGIN
        BEGIN
            SELECT CLAVE INTO L_KEY
            FROM FIDE_CLAVE_ENCRIPTAR_TB
            WHERE ID_CLAVE = 1;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20001, 'No se encontró la clave de encriptación.');
        END;
        BEGIN
            SELECT CONTRASENA INTO L_ENCRIPTED_DATA
            FROM FIDE_USUARIOS_TB
            WHERE CEDULA = P_CEDULA;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20002, 'No se encontró la contraseña para la cédula proporcionada.');
        END;

        L_DESENCRIPTED_DATA := DBMS_CRYPTO.Decrypt(
            SRC => L_ENCRIPTED_DATA,
            TYP => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5,
            KEY => L_KEY
        );

        L_RESULTADO := UTL_RAW.CAST_TO_VARCHAR2(L_DESENCRIPTED_DATA);

        P_CONTRASENA := L_RESULTADO;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20003, 'ERROR EN EL PROCESO DE DESENCRIPTACIÓN: ' || SQLERRM);
    END FIDE_DESENCRIPTAR_CONTRASENA_SP;

END FIDE_LOS_JAULES_DESENCRIPTACION_CONTRASENA_PKG;
/
-----------------------------------------------------------------------------------------------------------------------
DECLARE
    V_CONTRASENA VARCHAR2(100);
BEGIN
    PKG_DESENCRIPTACION_CONTRASENA.FIDE_DESENCRIPTAR_CONTRASENA_SP(305550650, V_CONTRASENA);

    DBMS_OUTPUT.PUT_LINE('La contraseña desencriptada es: ' || V_CONTRASENA);
END;
/


CREATE OR REPLACE PACKAGE FIDE_LOS_JAULES_LOGIN_PKG AS
FUNCTION FIDE_LOS_JAULES_LOGIN_SP(P_CEDULA IN NUMBER, P_CONTRASENA IN VARCHAR2) RETURN BOOLEAN;
PROCEDURE FIDE_LOS_JAULES_GET_USUARIOS_SP (P_CEDULA IN NUMBER, DATOS OUT SYS_REFCURSOR);
END FIDE_LOS_JAULES_LOGIN_PKG;

CREATE OR REPLACE PACKAGE BODY FIDE_LOS_JAULES_LOGIN_PKG AS

    PROCEDURE FIDE_LOS_JAULES_GET_USUARIOS_SP (P_CEDULA IN NUMBER, DATOS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN DATOS FOR 
        SELECT U.CEDULA, U.NOMBRE, U.APELLIDO1, U.APELLIDO2, U.ID_ESTADO, U.ID_ROL, U.ID_ASOCIADO
        FROM FIDE_USUARIOS_TB U
        WHERE U.CEDULA = P_CEDULA;
    END;

    FUNCTION FIDE_LOS_JAULES_LOGIN_SP(P_CEDULA IN NUMBER, P_CONTRASENA IN VARCHAR2) RETURN BOOLEAN
    AS
        V_CONTRASENA VARCHAR2(100);
        V_CEDULA NUMBER;
    BEGIN
        -- Verificar si la cédula existe en la tabla
        BEGIN
            SELECT CEDULA INTO V_CEDULA
            FROM FIDE_USUARIOS_TB
            WHERE CEDULA = P_CEDULA;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RETURN FALSE; -- Si no se encuentra la cédula, retorna falso
        END;

        FIDE_LOS_JAULES_DESENCRIPTACION_CONTRASENA_PKG.FIDE_DESENCRIPTAR_CONTRASENA_SP(P_CEDULA, V_CONTRASENA);

        IF V_CONTRASENA = P_CONTRASENA THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END FIDE_LOS_JAULES_LOGIN_SP;
END FIDE_LOS_JAULES_LOGIN_PKG;

COMMIT;
DECLARE
    V_RESULTADO BOOLEAN;
BEGIN
    V_RESULTADO := FIDE_LOS_JAULES_LOGIN_PKG.FIDE_LOS_JAULES_LOGIN_SP(113810955, 'MiContras3ñaSegura123');
    
    IF V_RESULTADO THEN
        DBMS_OUTPUT.PUT_LINE('Login exitoso.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Login fallido.');
    END IF;
END;



