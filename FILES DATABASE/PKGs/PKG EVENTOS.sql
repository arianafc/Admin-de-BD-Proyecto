CREATE OR REPLACE PACKAGE FIDE_LOS_JAULES_EVENTOS_PKG AS
PROCEDURE FIDE_EVENTOS_TB_GET_EVENTOS_ACTIVOS_SP (DATOS OUT SYS_REFCURSOR);
PROCEDURE FIDE_EVENTOS_TB_GET_EVENTO_SP (DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
FUNCTION FIDE_EVENTOS_TB_INSERTAR_REGISTRO_MIEMBRO_FN (P_CEDULA IN NUMBER, P_ID_EVENTO IN NUMBER) RETURN NUMBER;
FUNCTION FIDE_EVENTOS_TB_VALIDAR_MEMBRESIA_FN (P_CEDULA IN NUMBER) RETURN NUMBER;
FUNCTION FIDE_EVENTOS_TB_INSERTAR_REGISTRO_INVITADO_FN (P_CEDULA_MIEMBRO IN NUMBER, P_CEDULA_INVITADO IN NUMBER, P_ID_EVENTO IN NUMBER) RETURN NUMBER;
END FIDE_LOS_JAULES_EVENTOS_PKG;

CREATE OR REPLACE PACKAGE BODY FIDE_LOS_JAULES_EVENTOS_PKG AS

--VALIDAR SI EL USUARIO TIENE UNA MEMBRESIA ACTIVA QUE PERMITA REGISTRARSE EN LOS EVENTOS
FUNCTION FIDE_EVENTOS_TB_VALIDAR_MEMBRESIA_FN (P_CEDULA IN NUMBER) RETURN NUMBER
AS
V_CONTAR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM FIDE_MEMBRESIAS_TB 
    WHERE CEDULA = P_CEDULA AND ID_ESTADO = 1;
    
    IF V_CONTAR = 1 THEN
        RETURN 1;
    ELSE 
        RETURN 0;
    END IF;

END FIDE_EVENTOS_TB_VALIDAR_MEMBRESIA_FN;

--OBTIENE LOS EVENTOS ACTIVOS EN EL FE
PROCEDURE FIDE_EVENTOS_TB_GET_EVENTOS_ACTIVOS_SP (DATOS OUT SYS_REFCURSOR) 
AS
BEGIN
    OPEN DATOS FOR
    SELECT E.ID_EVENTO, E.NOMBRE, E.DESCRIPCION,TO_CHAR(hora, 'HH:MI AM') AS HORA, E.FECHA, E.ID_ESTADO, E.ID_INSTALACION, E.CAPACIDAD, I.NOMBRE AS INSTALACION
    FROM FIDE_EVENTOS_TB E
    INNER JOIN FIDE_INSTALACIONES_TB I
    ON E.ID_INSTALACION = I.ID_INSTALACION
    WHERE E.ID_ESTADO = 1;
END FIDE_EVENTOS_TB_GET_EVENTOS_ACTIVOS_SP;

--OBTIENE LOS DETALLES DEL EVENTOS 
PROCEDURE FIDE_EVENTOS_TB_GET_EVENTO_SP (DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) 
AS
BEGIN
    OPEN DATOS FOR
    SELECT E.ID_EVENTO, E.NOMBRE, E.DESCRIPCION, E.HORA, E.FECHA, E.ID_ESTADO, E.ID_INSTALACION, E.CAPACIDAD, I.NOMBRE AS INSTALACION
    FROM FIDE_EVENTOS_TB E
    INNER JOIN FIDE_INSTALACIONES_TB I
    ON E.ID_INSTALACION = I.ID_INSTALACION
    WHERE E.ID_EVENTO = P_ID;
END FIDE_EVENTOS_TB_GET_EVENTO_SP;

    
FUNCTION FIDE_EVENTOS_TB_INSERTAR_REGISTRO_MIEMBRO_FN (P_CEDULA IN NUMBER, P_ID_EVENTO IN NUMBER) RETURN NUMBER
AS
    V_SQL VARCHAR2(500);
    V_TIENE_MEMBRESIA NUMBER;
    V_FECHA_FIN DATE;
    V_FECHA_EVENTO DATE;
    V_CAPACIDAD NUMBER;
    V_TIPO_MEMBRESIA NUMBER;
BEGIN
    -- Validar si tiene membresía activa
    V_TIENE_MEMBRESIA := FIDE_EVENTOS_TB_VALIDAR_MEMBRESIA_FN(P_CEDULA);

    -- Asegúrate de que V_TIENE_MEMBRESIA esté devolviendo 1 para membresías activas
    IF V_TIENE_MEMBRESIA = 0 THEN
        RETURN 3; -- No tiene membresía activa
    END IF;

    SELECT FECHA, CAPACIDAD INTO V_FECHA_EVENTO, V_CAPACIDAD
    FROM FIDE_EVENTOS_TB
    WHERE ID_EVENTO = P_ID_EVENTO;

    IF V_CAPACIDAD <= 0 THEN
        RETURN 4; -- No hay cupo
    END IF;

IF V_TIENE_MEMBRESIA = 1 THEN
    SELECT ID_TIPO_MEMBRESIA, FECHA_FIN
    INTO V_TIPO_MEMBRESIA, V_FECHA_FIN
    FROM (
        SELECT ID_TIPO_MEMBRESIA, FECHA_FIN
        FROM FIDE_MEMBRESIAS_TB 
        WHERE CEDULA = P_CEDULA AND ID_ESTADO = 1
        ORDER BY FECHA_FIN DESC
    )
    WHERE ROWNUM = 1;

    -- Validación especial para pase diario (tipo 1)
    IF V_TIPO_MEMBRESIA = 1 THEN
        IF V_FECHA_FIN = V_FECHA_EVENTO THEN
            -- Registrar
            V_SQL := 'INSERT INTO FIDE_REGISTRO_EVENTOS_TB (CEDULA, ID_EVENTO, FECHA_REGISTRO) VALUES (:1,:2,:3)';
            EXECUTE IMMEDIATE V_SQL USING P_CEDULA, P_ID_EVENTO, SYSDATE;

            UPDATE FIDE_EVENTOS_TB SET CAPACIDAD = CAPACIDAD - 1 WHERE ID_EVENTO = P_ID_EVENTO;
            COMMIT;

            RETURN 1; -- Éxito
        ELSE
            RETURN 2; -- Pase diario no coincide con fecha del evento
        END IF;

    ELSE
        -- Resto de membresías: puede asistir si aún está vigente
        IF V_FECHA_FIN >= V_FECHA_EVENTO THEN
            V_SQL := 'INSERT INTO FIDE_REGISTRO_EVENTOS_TB (CEDULA, ID_EVENTO, FECHA_REGISTRO) VALUES (:1,:2,:3)';
            EXECUTE IMMEDIATE V_SQL USING P_CEDULA, P_ID_EVENTO, SYSDATE;

            UPDATE FIDE_EVENTOS_TB SET CAPACIDAD = CAPACIDAD - 1 WHERE ID_EVENTO = P_ID_EVENTO;
            COMMIT;

            RETURN 1; -- Éxito
        ELSE
            RETURN 2; -- Membresía expira antes del evento
        END IF;
    END IF;

ELSE 
    RETURN 3; -- No tiene membresía activa
END IF;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END FIDE_EVENTOS_TB_INSERTAR_REGISTRO_MIEMBRO_FN;


FUNCTION FIDE_EVENTOS_TB_INSERTAR_REGISTRO_INVITADO_FN (P_CEDULA_MIEMBRO IN NUMBER, P_CEDULA_INVITADO IN NUMBER, P_ID_EVENTO IN NUMBER) RETURN NUMBER
AS
V_CONTAR NUMBER;
V_ID_INVITADO NUMBER;
V_SQL VARCHAR2(200);
V_CAPACIDAD NUMBER;
BEGIN

    --VALIDAMOS SI HAY CUPO EN EL EVENTO
    SELECT CAPACIDAD INTO  V_CAPACIDAD
    FROM FIDE_EVENTOS_TB
    WHERE ID_EVENTO = P_ID_EVENTO;

    IF V_CAPACIDAD <= 0 THEN
        RETURN 2; -- No hay cupo
    END IF;

    --OBTENEMOS SI EL USUARIO ES INVITADO DEL MIEMBRO QUE INDICA
    SELECT COUNT(CEDULA) INTO V_CONTAR FROM FIDE_INVITADOS_TB
    WHERE CEDULA=P_CEDULA_INVITADO AND CEDULA_MIEMBRO = P_CEDULA_MIEMBRO AND ID_ESTADO = 1;
    
    
    IF V_CONTAR > 0 THEN
            SELECT ID_INVITADO INTO V_ID_INVITADO FROM FIDE_INVITADOS_TB
            WHERE CEDULA=P_CEDULA_INVITADO AND CEDULA_MIEMBRO = P_CEDULA_MIEMBRO;
            
            V_SQL := 'INSERT INTO FIDE_REGISTRO_EVENTOS_TB (ID_INVITADO, ID_EVENTO, FECHA_REGISTRO) VALUES (:1,:2,:3)';
            EXECUTE IMMEDIATE V_SQL USING V_ID_INVITADO, P_ID_EVENTO, SYSDATE;
            UPDATE FIDE_EVENTOS_TB SET CAPACIDAD = CAPACIDAD - 1 WHERE ID_EVENTO = P_ID_EVENTO;
        
            COMMIT;
            
            RETURN 1; --EXITOSO
    ELSE 
            RETURN 0; --USUARIO NO ES INVITADO DE ESE MIEMBRO
    END IF;
EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);

END FIDE_EVENTOS_TB_INSERTAR_REGISTRO_INVITADO_FN;

END FIDE_LOS_JAULES_EVENTOS_PKG;

SET SERVEROUTPUT ON
COMMIT;

---------------------------------------------------------------------------------------

--NUEVO

CREATE SEQUENCE ID_INVITADO_SEQ INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 1;

--TRIGGER PARA INSERTAR INVITADOS

create or replace TRIGGER FIDE_INVITADOS_TB_INSERTAR_TG
    BEFORE INSERT ON FIDE_INVITADOS_TB
    FOR EACH ROW
    BEGIN
        SELECT ID_INVITADO_SEQ.NEXTVAL INTO :NEW.ID_INVITADO FROM DUAL;
END FIDE_INVITADOS_TB_INSERTAR_TG;

--------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER FIDE_REGISTRO_EVENTOS_TB_VALIDAR_REGISTRO_TG
BEFORE INSERT ON FIDE_REGISTRO_EVENTOS_TB
FOR EACH ROW
DECLARE
    V_EXISTE_REGISTRO NUMBER := 0;
    V_EXISTE_COMO_INVITADO NUMBER := 0;
BEGIN
    -- Verificar si ya existe un registro como miembro o invitado para el evento
    SELECT COUNT(*)
    INTO V_EXISTE_REGISTRO
    FROM FIDE_REGISTRO_EVENTOS_TB
    WHERE ID_EVENTO = :NEW.ID_EVENTO
    AND (
        (:NEW.CEDULA IS NOT NULL AND CEDULA = :NEW.CEDULA)
        OR (:NEW.ID_INVITADO IS NOT NULL AND ID_INVITADO = :NEW.ID_INVITADO)
    );

    IF V_EXISTE_REGISTRO > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El usuario ya está registrado en este evento.');
    END IF;

    -- Si es un miembro (no es invitado), verificar que no haya sido ya registrado como invitado
    IF :NEW.ID_INVITADO IS NULL THEN
        SELECT COUNT(*)
        INTO V_EXISTE_COMO_INVITADO
        FROM FIDE_INVITADOS_TB I
        JOIN FIDE_REGISTRO_EVENTOS_TB R ON I.ID_INVITADO = R.ID_INVITADO
        WHERE I.CEDULA = :NEW.CEDULA
        AND R.ID_EVENTO = :NEW.ID_EVENTO;

        IF V_EXISTE_COMO_INVITADO > 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Ya estás registrado como invitado en este evento. No puedes registrarte también como miembro.');
        END IF;
    END IF;
END;

COMMIT;


---PRUEBA
INSERT INTO FIDE_INVITADOS_TB (CEDULA, FECHA_REGISTRO, ID_ESTADO, CEDULA_MIEMBRO) VALUES
(8977, SYSDATE, 1, 1233)
COMMIT;



DECLARE
    v_resultado NUMBER;
BEGIN
    v_resultado :=  FIDE_LOS_JAULES_EVENTOS_PKG.FIDE_EVENTOS_TB_INSERTAR_REGISTRO_MIEMBRO_FN(303180660, 1);
    DBMS_OUTPUT.PUT_LINE('Resultado: ' || v_resultado);
END;


create or replace TRIGGER FIDE_REGISTRO_EVENTOS_TB_VALIDAR_MEMBRESIAS_TB
BEFORE INSERT ON FIDE_REGISTRO_EVENTOS_TB
FOR EACH ROW
DECLARE
    V_MEMBRESIA_VALIDA NUMBER;
    V_FECHA_EVENTO DATE;
BEGIN
    -- Obtener la fecha del evento desde la tabla FIDE_EVENTOS_TB
    SELECT FECHA INTO V_FECHA_EVENTO
    FROM FIDE_EVENTOS_TB
    WHERE ID_EVENTO = :NEW.ID_EVENTO;

    -- Verificar si el usuario tiene una membresía válida para la fecha del evento
    SELECT COUNT(*) INTO V_MEMBRESIA_VALIDA
    FROM FIDE_MEMBRESIAS_TB 
    WHERE CEDULA = :NEW.CEDULA 
    AND ID_ESTADO = 1  -- Estado activo
    AND V_FECHA_EVENTO BETWEEN FECHA_INICIO AND FECHA_FIN;

    -- Si no tiene una membresía válida, lanzar un error
    IF V_MEMBRESIA_VALIDA=0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El usuario no tiene una membresía o pase activo para validar el registro al evento');
    END IF;
END;

commit


DROP TRIGGER FIDE_REGISTRO_EVENTOS_TB_VALIDAR_MEMBRESIAS_TB
